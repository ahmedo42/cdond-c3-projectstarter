version: 2.1


orbs:
  slack: circleci/slack@4.4.2

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow-id:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID}

      
#     steps:
#       - run:
#           name: Delete S3 
#           when: on_fail
#           command: |
#              aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID} --force

#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} 
#             aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} 

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force



  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=udapeople-frontend \
              # --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              # --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |   
            cd .circleci/ansible            
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-*" \
              --output text >> inventory.txt
            BACKEND_INSTANCE_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-*" \
              --output text)
            echo $BACKEND_INSTANCE_IP
            curl -H "Content-Type: text/plain" \
              -H "token: 27c524b6-60fd-488c-a39f-4cbea4dca7f0" \
              --request PUT --data "$BACKEND_INSTANCE_IP" https://api.memstash.io/values/BACKEND_INSTANCE_IP_${CIRCLE_WORKFLOW_ID} 

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_key:
#           fingerprints: ["e5:76:fe:7b:7b:34:af:b9:1f:89:b8:97:02:88:bb:cc"]
  
#       - attach_workspace:
#           at: ~/      
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible curl jq tar gzip ansible nodejs npm
#             pip install awscli
#       - run:
#           name: Configure server
#           command: |
#             cd ~/project/.circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml

#   run-migrations:
#     <<: *defaults
#     steps:
#       - checkout
#       - run:
#           name: Export env variables
#           command: |
#             touch backend/.env
#             echo NODE_ENV=$ENVIRONMENT >> "backend/.env"
#             echo VERSION=${CIRCLE_WORKFLOW_ID} >> "backend/.env"
#             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
#             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
#             echo TYPEORM_ENTITIES=.$TYPEORM_ENTITIES >> "backend/.env"
#             echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
#             cd backend
#             cat .env          
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run build
#             npm run migrations > migration-log.txt
#             cat migration-log.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             if grep -q "has been executed successfully" migrations_log.txt; then 
#               curl -H "Content-Type: text/plain" -H token: c1e0e2c0-9a4a-489d-86af-5472dcd4d249" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#             else
#               curl -H "Content-Type: text/plain" -H "token: c1e0e2c0-9a4a-489d-86af-5472dcd4d249" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#             fi
#             RESULT=$(curl -H "token: c1e0e2c0-9a4a-489d-86af-5472dcd4d249" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
#             echo "${RESULT}"        
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build
          
#   deploy-frontend:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             cd frontend
#             npm install
          
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_IP= $(curl -H "Content-Type: text/plain" -H "token: f6e186ed-09dd-4c4c-83ef-e7c5f6257135" --request PUT --data "" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID})     
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo "API_URL=$API_URL" >> frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm install
#             npm run build
#             aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
                    
#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_key:
#           fingerprints: ["e5:76:fe:7b:7b:34:af:b9:1f:89:b8:97:02:88:bb:cc"]
#       - attach_workspace:
#           at: ~/         
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible nodejs npm jq curl gzip tar
#             apk add --no-cache openssh-client
#             apk add --no-cache --upgrade bash
#             pip install awscli
#       - run:
#           name: Deploy backend
#           command: |
#             ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

#   smoke-test:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip install awscli
#       - run:
#           name: Get backend url
#           command: |
#            export BACKEND_URL = "http://$BACKEND_URL:3030/api/status" 
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          context:
            - slack-context
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]